/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.5 public/models/untitled.glb -t
*/

import * as THREE from 'three'
import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import { gsap } from 'gsap'
import { useFrame } from '@react-three/fiber'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    ['QS1323-W02-files1']: THREE.Mesh
  }
  materials: {
    ['QS1323-W02-files1']: THREE.MeshStandardMaterial
  }
}

export const FLOOR_HEIGHT = 2.3
export const NB_FLOORS = 3

export function Office(props: JSX.IntrinsicElements['group']) {
  const ref = useRef<THREE.Group | null>(null)
  const tl = useRef<gsap.core.Timeline | undefined>()

  const scroll = useScroll()

  useFrame(() => {
    tl.current?.seek(scroll.offset * tl.current?.duration())
  })

  useLayoutEffect(() => {
    tl.current = gsap.timeline()

    // Vertical animation

    tl.current?.to(ref.current?.position!, {
      duration: 2,
      y: -FLOOR_HEIGHT * (NB_FLOORS - 1)
    }),
      0
  }, [])

  const { nodes, materials } = useGLTF('./models/untitled.glb') as GLTFResult
  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh
        geometry={nodes['QS1323-W02-files1'].geometry}
        material={materials['QS1323-W02-files1']}
        rotation={[-0.378, 0.072, -1.768]}
      />
    </group>
  )
}

useGLTF.preload('./models/untitled.glb')
